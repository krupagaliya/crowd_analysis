# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WMgIrBvIfsTVwOHEuHoUfLWlAjZvCRcT
"""

# !pip install tensorflow-gpu==1.14.0
# !pip install tensorflow==1.14.0

"""## Connect with Google Drive"""

# cd /content/drive/My Drive/BE_Project/API_dev

# !git clone https://github.com/krupagaliya/crowd_analysis.git

# !pip install flask-ngrok

# !pip install -U flask-cors

# ls

# !git pull

# ls

# cd crowd_analysis/

# !python crowd_count.py

# ls

# !python app.py

# ls

from keras.models import model_from_json
import os
import cv2
import glob
import h5py
import pandas as pd
import scipy.io as io
from PIL import Image
import numpy as np
import tensorflow as tf
from tensorflow.python.keras.utils import losses_utils


mse = tf.keras.losses.MeanSquaredError(reduction=losses_utils.ReductionV2.SUM)
mae = tf.keras.losses.MeanAbsoluteError(reduction=losses_utils.ReductionV2.SUM)


from keras.models import model_from_json
json_file = open('files/model_reduce_filter.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)

loaded_model.load_weights("files/model_weights_1_rmsprop.h5")

def create_img(path):
    # Function to load,normalize and return image
    im = cv2.imread(path)

#     cv2.imshow('image',im)
#     cv2.waitKey(10000)
#     cv2.destroyAllWindows();
    im = np.array(im)
    im = im / 255.0
    cv2.imwrite('./result/input.jpg',im)
    
    im[:, :, 0] = (im[:, :, 0] - 0.485) / 0.229
    im[:, :, 1] = (im[:, :, 1] - 0.456) / 0.224
    im[:, :, 2] = (im[:, :, 2] - 0.406) / 0.225
    
    # print(im.shape)
    # im = np.expand_dims(im,axis  = 0)
    return im

img1 = 'data/img1.png'

import matplotlib.pyplot as plt
plt.imshow(create_img(img1))
plt.show()
# plt.savefig('input_image.png')

input = create_img(img1)

x = np.asarray(input)
input = np.expand_dims(x, axis=0)
print(input.shape)

output = loaded_model.predict(input)

output_s = np.squeeze(output)

output_s

from matplotlib import cm as c
plt.imshow(output_s,cmap = c.jet)
print("Predicted Count:-",np.sum(output,dtype=np.float32))
plt.savefig('output_image.png')
plt.show()

